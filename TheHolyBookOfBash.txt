Source: https://www.gnu.org/software/bash/manual/bash.html#Shell-Parameter-Expansion

Data Types
	- There are no 'data types' in bash like there are in python.
	Numbers
		- Only raw numbers can do maths
		- No specific formatting??
			ex: $((1+2)) works but $(("1"+"2")) doesn't
	
	Strings
		- Strings are surrounded in double (") or single (') quotes
		- If a data item is to be treated like a string contain it with quotes!
		- When dealing with numbers use quotes to ensure that any numbers are treated as strings
		- more deets abt strings
	
	Arrays
		- Understand me!!!
		The [@] is used to index all the elements of an array.	IS THIS TRUE?
		I believe the reason that the double quotes (") are required when calling the array in the for loop is because every time the array is indexed the quotation marks encapsulate	IS THIS TRUE?


Operators:
	Maths:
		Math can only be done with raw integers not string integers
		$((operations))
			- Understand why the syntax works like that
		+ addition
		- subtraction
		/ division
			Returns the answer rounded down to the whole number
				ex: $((5/3)); >>> 1
		* multiplication
		% divides then returns the remainder
			ex: $((5%3)); >>> 2
		Functions
			Include some essential maths functions use link as a jumping point
			(https://unix.stackexchange.com/questions/40786/how-to-do-integer-float-calculations-in-bash-or-other-languages-frameworks)

	String manipulation:
		- UNDERSTAND ME

	Comparisons:
		- UNDERSTAND ME


Variables
	- Defined by a single '='
		ex: things_i_love="cats"
	- ONLY global and shell variables should be all uppercase
		ex: PWD vs things_i_love
	- Local variables should be lowercase
	- To call a variable use a single '$'
		ex: $PWD or $things_i_love
	- When calling a variable the {} are used to isolate the variable to ensure correct syntax.
		EX: echo "${Hello}World" vs echo -n "$Hello"; echo "World" because echo "$HelloWorld" returns something different
	The [@] is used to index all the elements of a variable. IS THIS TRUE?


Conditional Constructs:
	- A feature of a language that allows customized inputs and outputs. Statements are a form of high
	  level logic operations (like an if statement).
	
	case
		- Case is not a function it's a statement
		- In a way case acts as a set of nested if statements
		ex: 
			case $variable in
				pattern)
					echo "pattern"
					;;
			esac
		broken down:
			case $variable in
				- Initiates the case statement
				- The value of $variable will be checked against all the below value
				- The 'in' keyword encapsulates the variable being matched and is followed
				  by the patterns being matched
			pattern)
				- This is the first pattern being matched
				- Case automatically treats the $variable and pattern) as strings
				- So if $variable=pattern then the code below pattern) will execute
				- If not nothing will happen and the statement tries the other patterns
				- The close parentheses ')' indicates the end of the pattern
			echo "pattern" ;;
				- This is the code that is executed if $variable matches pattern
				- This section is highly customizable
				- The double semicolon is a control operator
					- This specific control operator ';;' ends the case statement and
					  stops trying to match $variable to other patterns
					- If there is another pattern that will match $variable it will
					  never execute
						ex: 
							case $variable in
								pattern)
									echo "pattern 1"
									;;
								pattern)
									echo "pattern 2"
									;;
							esac
			esac
				- This keyword signals the complete end of the case statement
				- Nothing super special just case backwards

	if
		Comprised of CONDITION and STUFF commands	IS THIS TRUE?
		When CONDITION is executed it leaves behind an exit status	IS THIS TRUE?
		If this exit status is 0 then the CONDITION evaluated to true and if not it's false	IS THIS TRUE?
		STUFF is only executed if CONDITION exits with a status of 0	IS THIS TRUE?
			ex: if CONDITION	IS THIS TRUE?
			    do STUFF		IS THIS TRUE?
			    fi			IS THIS TRUE?

	select
	    - understand me!

    ((…))
		- understand me!

    [[…]]
		- understand me!


Looping constructs:
	- Notes

	while <condition>; do; <code>; done
	    ex: while getopts ":hrvklpsui" opt
	    Loops as long as the <condition> (getopts ":hrvklpsui" opt) is true
	    To signify the end of the loop use 'done'.

	for
		- understand me!

    until
        - understand me!


Bourne Shell Built-in Commands:
	- notes

	exit
		- understand me!

    :
    	- understand me!

    .
    	- understand me!

    break
    	- understand me!

    cd
    	- understand me!

    continue
    	- understand me!

    eval
    	- understand me!

    exec
    	- understand me!

    export
    	- understand me!

    getopts <optsting> <name> [arg1 arg2 argX]
    	Use by a script to parse positional parameters
        Each time getopts is called the next argument from the execution of the script is accessed and assigned to <name>
        <optstring> contains the option characters to be recognized; if a character is followed by a colon, the option is expected to have an argument, which should be separated from it by whitespace
        The colon (‘:’) and question mark (‘?’) may not be used as option characters
        The index of the last argument accessed is stored in $OPTIND
        $OPTIND is only reset or initialized to 1 every time a script is executed
        By default processes args passed on script execution but can process supplied arguments [arg 1 arg2 argX]
        If the first character of <optstring> is a colon, silent error reporting is used
        In normal operation, diagnostic messages are printed when invalid options or missing option arguments are encountered
    	ex: getopts ":hrvklpsui" opt
    	    Reads the first argument (arg1) passed when the script was executed
    	        This is the first time the get ops is called, so it initializes tbe $OPTIND and sets it to 1
    	    Runs in silent mode because <optstring> starts with a ':'
    	    Checks the value of arg1 against h, r, v, k, l, p, s, u, or i
    	    The value of arg1 is assigned to $opt




    hash
    	- understand me!

    pwd
    	- understand me!

    readonly
    	- understand me!

    return
    	- understand me!

    shift
    	- understand me!

    test
    	- understand me!

    umask
    	- understand me!

    unset
    	- understand me!


Passing arguments to a function		IS THIS TRUE?
	- Update with the while and case rombo combo
	When a function is called special sheet variables are used to assign what arguments have been passed
	These variables are $0 through $9
	$0 is always fixed to the function (or executable) name
	$1 - $9 are all the arguments
	$# is the number of arguments passed
		EX. In "ScriptKitty -h" $# will evaluate to 1


Syntax
	- Use "man bash" as a jumping off point
	Control operators
		- A token that performs a control function.
		||
		&
		&&
		;
			Semicolons (;) can be used to make lines of code denser it is signifies a new line of code to the interpreter
		;;
		( )
		|
		|&
		<newline>
	
	Metacharacters 
		- A character that, when unquoted, separates words.
		|
		&
		;
		( )
			- IS THIS ▼ VALID?
			Allow the user to execute the enclosed code in a subshell
			This subshell acts similar to a function in python and will keep any variable assignments or redirection isolated
		< >
		space
		tab
	
	Where do I put these?? ▼ 
		Parenthesis with a leading dollar sign $()
			This is a 'command substitution'
			Executes the nested command in a subshell
			Useful for getting the output of a command and substituting it
				ex: VAR=$(Command arg1 arg2)
		Double brackets [[]]
			These surround conditional expressions
			There MUST be spaces between every element '[[ -e $file ]]' is good but '[[-e$file]]' is bad
			Some logic operators
				https://www.gnu.org/software/bash/manual/bash.html#Bash-Conditional-Expressions
				Is equal to
					[[ $var1 == $var2 ]]
				Is not equal to
					[[ $var1 != $var2 ]]
				sort 
					[[ $var1 > $var2 ]] true if var1 sorts before var2 lexicographically (the way a dictionary is sorted use an ascii table)
		Single brackets []
			A legacy way to use conditional expressions
			This syntax can be used but may be funky
			Best only for use when a script is to be used by multiple different shells


Portability	IS THIS TRUE?
	Use [] and = for conditional expressions (replaces [[]] and == respectively)
	What are the main differences between shells?


Exit status of a command	IS THIS TRUE?
	Every time a command is run an exit status is outputted
	This status is stored in  $? For the last command executed
	If the command is successful then exit status of 0 is assigned if there is a failure any number between 1 and 255 can be assigned
	Extremely useful for error handling and debugging


Passing an argument to a script (flags)	IS THIS TRUE?
	example: 
		script:
			echo -e "Function name: $0\nArg 1: $1\nArg 2: $2\nTotal args: $#"
		user input: 
			./TestRange -a balloon
		output:
			Function name: ./TestRange
			Arg 1: -a
			Arg 2: balloon
			Total args: 2

#!/bin/bash
# A script that allows profiles to be loaded for faster and secure remote management
# 'server-ssh' isn't super portable so if needed replace - with _

# Saved server profiles
hostname_1="hostname"
user_1="user"
ip_1="xxx.xxx.xxx.xxx"
port_1="22"
key_auth_1="true"

hostname_2="hostname"
user_2="user"
ip_2="xxx.xxx.xxx.xxx"
port_2="22"
key_auth_2="true"

hostname_3="hostname"
user_3="user"
ip_3="xxx.xxx.xxx.xxx"
port_3="22"
key_auth_3="true"

# Default settings
hostname=hostname_1
user=user_1
ip=ip_1
port=port_1
key_auth=key_auth_1
execute="true"	# Determines if a connectiopn will be attempted (used mostly for error handling)
mode="ssh"	# The sucure connection being attempted
ip_mode="IPv4"
verbose="false"

while getopts ":hrvklpsui" opt; do
	case $opt in
		h)
			echo "usage: server-ssh [-h] [-r] [-v] [-u user] [-i IP] [-p profile]
                  [-s hostname user IP] [-l] [-k privkeypath]
		  [-port portnum] [-version]"
			echo "       -h		Displays this help message"
			echo "	     -version 
			echo "       -r		Logs in with root user instead of default user"
			echo "       -v		Enables verbose outputs"
			echo "	     -k		Uses key based authentication"
			#echo "       -l	 List all saved profiles"
			#echo "       -p      Loads saved profiles"
			#echo "       -s      Saves a new server profile"
			#echo "       -u      Custom user can be entered"
			#echo "       -i      Custom IP can be entered"
			#echo "       -port   Custom port can be entered"
			echo "default: $user@$ip"
			echo "purpose: Establishes a ssh connection with a remote server. Can also load saved profiles."
			execute=false
			;;
		r)
			user=root
			;;	
		v)
			verbose="true"	# Currently doesn't actually do anything (could just print the profile being used before the ssh command executes)
			echo "Hostname: $hostname"
			echo "User: $user"
			echo "IP: $ip"
			echo "Port: $user"
			echo "Key Authentication: $key_auth"
			;;
		i)
			echo -n "Enter IPv4 address: " read ip
			;;
		*)
			echo "Unknown option: $OPTARG"
			# Padding to make the help line stand out
			echo ""
			echo "To display command help use -h flag"
			echo ""
			execute=false
			;;
	esac
done

if [ "$execute" = "true" ]; then
	if [ "$verbose" = "true" ]; then
		$mode -v $user@$ip
	else
		$mode $user@$ip
fi

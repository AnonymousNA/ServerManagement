#!/bin/bash
# A script that allows profiles to be loaded for faster and secure remote management
# 'server-ssh' isn't super portable so if needed replace - with _

# Project steps:
#	Allow key auth
#		Just passes the -i <priv_key_path> to the core command (current)
#	Custom user
#		Input validation 
#		Error handling
#	Custom IPv4 only for now
#		Input validation
#		Error handling
#	List profiles
#	Load profiles
#		Basic Functionality
#		Input validation
#		Error handling
#	Save profiles
#		Basic Functionality
#		Only allow IPv4 adress
#		Input validation
#		Error handling
#	Allow options for IPv4 and v6
#		Core ssh command where the default profile contains a IPv6 address
#		Enable custom IPv6 entering
#	Allow custom port
#		Basic Functionality
#		Input validation
#		Error handling
#       SFTP mode
#	SCP mode
#	key based auth setup mode

# Saved server profiles
hostname_1="hostname"
user_1="user"
ip_1="xxx.xxx.xxx.xxx"
port_1="22"
key_authentication1="true"

hostname_2="hostname"
user_2="user"
ip_2="xxx.xxx.xxx.xxx"
port_2="22"
key_authentication2="true"

hostname_3="hostname"
user_3="user"
ip_3="xxx.xxx.xxx.xxx"
port_3="22"
key_authentication3="true"

# Default settings
user=user_1
ip=ip_1
port=port_1
key_authentication=key_authentication1
execute="true"	# Determines if a connectiopn will be attempted (used mostly for error handling)
mode="ssh"	# The sucure connection being attempted
verbose="false"

while getopts ":hrvuipsl" opt; do
	case $opt in
		h)
			echo "usage: server-ssh [-h] [-r] [-v] [-u user] [-i IP] [-p profile]
                  [-s hostname user IP] [-l]"
			echo "       -h      Displays this help message"
			echo "       -r      Logs in with root user instead of default user"
			echo "       -v      Enables verbose outputs"
			echo "       -u      Custom user can be entered."
			#echo "       -i      Custom IP can be entered."
			#echo "       -p      Loads saved profiles"
			#echo "       -s	     Creates and saves a new server profile"
			#echo "       -l      List all saved profiles"
			echo "default: $user@$ip"
			echo "purpose: Establishes a ssh connection with a remote server. Can also load saved profiles."
			execute=false
			;;
		r)
			user=root
			;;	
		v)
			verbose=true	# Currently doesn't actually do anything (find out if this option needs to be here) (could just print the profile being used before the ssh command executes)
			;;
		u)
			echo -n "Enter username: " read user
			# Include input validation
			# Rules:
			#	- Must be one string no white spaces
			#	- 32 char max leagnth	${#user} this will return the length of the varable user
			#	- No capital letters
			#	- No periods
			#	- Don't end in a dash
			#	- No colons
                        # Include error handling
			#	Make a single function and just have it call when an error state has occored
			;;
		i)
			#echo -n "Enter IPv4: " read ip
			# Include input validation
			# Rules:
			#	In IPv4 mode:
			#		- [0-255].[0-255].[0-255].[0-255]
			#		- Limit each section to a max number of "255".
			#		- Allow siplification so 000.000.000.000 can be entered as 0.0.0.0
			#	In IPv6 mode:
			#		- 
			# Include error handling
			#	Make a single function and just have it call when an error state has occored
			;;
		p)
			# Loads saved profiles
			# These profiles should be moved to an external file but for now they will be hard coded
			# Include input validation
                        # Include error handling
			#	Make a single function and just have it call when an error state has occored
			;;
		s)
			# Will save the user and IP entered
			# Needs a bit of logic so that the new profile will keep the properties of the one loaded
			#	if all field aren't filled out (hostname, IPv4 or IPv6, user)
			# Include input validation
                        # Include error handling
			#	Make a single function and just have it call when an error state has occored
			;;
		l)
			# List all saved profiles
			;;
		*)
			echo "Unkown option: $OPTARG"
			# Padding to make the help line stand out
			echo ""
			echo "To display command help use -h flag"
			echo ""
			execute=false
			;;
	esac
done

if [ "$execute" = "true" ]; then
	$mode $user@$ip
fi
